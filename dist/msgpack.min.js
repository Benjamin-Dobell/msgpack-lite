(function (exports,util,stream) {
	'use strict';

	var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {}

	function interopDefault(ex) {
		return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;
	}

	function createCommonjsModule(fn, module) {
		return module = { exports: {} }, fn(module, module.exports), module.exports;
	}

	var index = createCommonjsModule(function (module) {
	var toString = {}.toString;

	module.exports = Array.isArray || function (arr) {
	  return toString.call(arr) == '[object Array]';
	};
	});

	var isArray = interopDefault(index);

	/* globals Buffer */

	function c(B) {
	  return B && B.isBuffer && B;
	}

	var buffer =
	    c(("undefined" !== typeof Buffer) && Buffer) ||
	    c(undefined.Buffer) ||
	    c(("undefined" !== typeof window) && window.Buffer) ||
	    undefined.Buffer;

	var arr = alloc$1(0);

	/**
	 * @param size {Number}
	 * @returns {Buffer|Uint8Array|Array}
	 */

	function alloc$1(size) {
	  return new Array(size);
	}

	/**
	 * @param value {Array|ArrayBuffer|Buffer|String}
	 * @returns {Array}
	 */

	function from$1(value) {
	  if (!isBuffer(value) && isView(value)) {
	    // TypedArray to Uint8Array
	    value = from$3(value);
	  } else if (isArrayBuffer(value)) {
	    // ArrayBuffer to Uint8Array
	    value = new Uint8Array(value);
	  } else if (typeof value === "string") {
	    // String to Array
	    return from.call(arr, value);
	  } else if (typeof value === "number") {
	    throw new TypeError('"value" argument must not be a number');
	  }

	  // Array-like to Array
	  return Array.prototype.slice.call(value);
	}



	var Array$1 = Object.freeze({
	  alloc: alloc$1,
	  from: from$1,
	  concat: concat
	});

	var Buffer$1 = buffer;

	var arr$1 = hasBuffer ? alloc$2(0) : [];

	/**
	 * @param size {Number}
	 * @returns {Buffer|Uint8Array|Array}
	 */

	var alloc$2 = hasBuffer ? Buffer$1.alloc : function (size) {
	  return new Buffer$1(size);
	};

	/**
	 * @param value {Array|ArrayBuffer|Buffer|String}
	 * @returns {Buffer}
	 */

	function from$2(value) {
	  if (!isBuffer(value) && isView(value)) {
	    // TypedArray to Uint8Array
	    value = from$3(value);
	  } else if (isArrayBuffer(value)) {
	    // ArrayBuffer to Uint8Array
	    value = new Uint8Array(value);
	  } else if (typeof value === "string") {
	    // String to Buffer
	    return from.call(arr$1, value);
	  } else if (typeof value === "number") {
	    throw new TypeError('"value" argument must not be a number');
	  }

	  // Array-like to Buffer
	  if (Buffer$1.from && Buffer$1.from.length !== 1) {
	    return Buffer$1.from(value); // node v6+
	  } else {
	    return new Buffer$1(value); // node v4
	  }
	}



	var Buffer$2 = Object.freeze({
	  alloc: alloc$2,
	  from: from$2,
	  concat: concat
	});

	var arr$2 = hasArrayBuffer ? alloc$3(0) : [];

	/**
	 * @param size {Number}
	 * @returns {Buffer|Uint8Array|Array}
	 */

	function alloc$3(size) {
	  return new Uint8Array(size);
	}

	/**
	 * @param value {Array|ArrayBuffer|Buffer|String}
	 * @returns {Uint8Array}
	 */

	function from$3(value) {
	  if (isView(value)) {
	    // TypedArray to ArrayBuffer
	    var byteOffset = value.byteOffset;
	    var byteLength = value.byteLength;
	    value = value.buffer;
	    if (value.byteLength !== byteLength) {
	      if (value.slice) {
	        value = value.slice(byteOffset, byteOffset + byteLength);
	      } else {
	        // Android 4.1 does not have ArrayBuffer.prototype.slice
	        value = new Uint8Array(value);
	        if (value.byteLength !== byteLength) {
	          // TypedArray to ArrayBuffer to Uint8Array to Array
	          value = Array.prototype.slice.call(value, byteOffset, byteOffset + byteLength);
	        }
	      }
	    }
	  } else if (typeof value === "string") {
	    // String to Uint8Array
	    return from.call(arr$2, value);
	  } else if (typeof value === "number") {
	    throw new TypeError('"value" argument must not be a number');
	  }

	  return new Uint8Array(value);
	}



	var Uint8Array$1 = Object.freeze({
	  alloc: alloc$3,
	  from: from$3,
	  concat: concat
	});

	// buffer-lite.js

	var MAXBUFLEN = 8192;

	/**
	 * Buffer.prototype.write()
	 *
	 * @param string {String}
	 * @param [offset] {Number}
	 * @returns {Number}
	 */

	function write$1(string, offset) {
	  var buffer = this;
	  var index = offset || (offset |= 0);
	  var length = string.length;
	  // JavaScript's string uses UTF-16 surrogate pairs for characters other than BMP.
	  // This encodes string as CESU-8 which never reaches 4 octets per character.
	  for (var i = 0; i < length; i++) {
	    var chr = string.charCodeAt(i);
	    if (chr < 0x80) {
	      buffer[index++] = chr;
	    } else if (chr < 0x800) {
	      buffer[index++] = 0xC0 | (chr >> 6);
	      buffer[index++] = 0x80 | (chr & 0x3F);
	    } else {
	      buffer[index++] = 0xE0 | (chr >> 12);
	      buffer[index++] = 0x80 | ((chr >> 6) & 0x3F);
	      buffer[index++] = 0x80 | (chr & 0x3F);
	    }
	  }
	  return index - offset;
	}

	/**
	 * Buffer.prototype.toString()
	 *
	 * @param [encoding] {String} ignored
	 * @param [start] {Number}
	 * @param [end] {Number}
	 * @returns {String}
	 */

	function toString$1(encoding, start, end) {
	  var buffer = this;
	  var index = start - 0 || 0;
	  if (!end) end = buffer.length;
	  var size = end - start;
	  if (size > MAXBUFLEN) size = MAXBUFLEN;
	  var out = [];
	  for (; index < end;) {
	    var array = new Array(size);
	    for (var pos = 0; pos < size && index < end;) {
	      var chr = buffer[index++];
	      chr = (chr < 0x80) ? chr :
	        (chr < 0xE0) ? (((chr & 0x3F) << 6) | (buffer[index++] & 0x3F)) :
	          (((chr & 0x3F) << 12) | ((buffer[index++] & 0x3F) << 6) | ((buffer[index++] & 0x3F)));
	      array[pos++] = chr;
	    }
	    if (pos < size) array = array.slice(0, pos);
	    out.push(String.fromCharCode.apply("", array));
	  }
	  return (out.length > 1) ? out.join("") : out.length ? out.shift() : "";
	}

	/**
	 * Buffer.prototype.copy()
	 *
	 * @param target {Buffer}
	 * @param [targetStart] {Number}
	 * @param [start] {Number}
	 * @param [end] {Number}
	 * @returns {number}
	 */

	function copy$1(target, targetStart, start, end) {
	  var i;
	  if (!start) start = 0;
	  if (!end && end !== 0) end = this.length;
	  if (!targetStart) targetStart = 0;
	  var len = end - start;

	  if (target === this && start < targetStart && targetStart < end) {
	    // descending
	    for (i = len - 1; i >= 0; i--) {
	      target[i + targetStart] = this[i + start];
	    }
	  } else {
	    // ascending
	    for (i = 0; i < len; i++) {
	      target[i + targetStart] = this[i + start];
	    }
	  }

	  return len;
	}



	var BufferLite = Object.freeze({
	  copy: copy$1,
	  toString: toString$1,
	  write: write$1
	});

	var Buffer$3 = buffer;

	var isBufferShim = hasBuffer && ("TYPED_ARRAY_SUPPORT" in Buffer$3);
	var brokenTypedArray = isBufferShim && !Buffer$3.TYPED_ARRAY_SUPPORT;

	/**
	 * @param target {Buffer|Uint8Array|Array}
	 * @param [targetStart] {Number}
	 * @param [start] {Number}
	 * @param [end] {Number}
	 * @returns {Buffer|Uint8Array|Array}
	 */

	function copy(target, targetStart, start, end) {
	  var thisIsBuffer = isBuffer(this);
	  var targetIsBuffer = isBuffer(target);
	  if (thisIsBuffer && targetIsBuffer) {
	    // Buffer to Buffer
	    return this.copy(target, targetStart, start, end);
	  } else if (!brokenTypedArray && !thisIsBuffer && !targetIsBuffer &&
	    isView(this) && isView(target)) {
	    // Uint8Array to Uint8Array (except for minor some browsers)
	    var buffer = (start || end != null) ? slice.call(this, start, end) : this;
	    target.set(buffer, targetStart);
	    return buffer.length;
	  } else {
	    // other cases
	    return copy$1.call(this, target, targetStart, start, end);
	  }
	}

	/**
	 * @param [start] {Number}
	 * @param [end] {Number}
	 * @returns {Buffer|Uint8Array|Array}
	 */

	function slice(start, end) {
	  // for Buffer, Uint8Array (except for minor some browsers) and Array
	  var f = this.slice || (!brokenTypedArray && this.subarray);
	  if (f) return f.call(this, start, end);

	  // Uint8Array (for minor some browsers)
	  var target = alloc.call(this, end - start);
	  copy.call(this, target, 0, start, end);
	  return target;
	}

	/**
	 * Buffer.prototype.toString()
	 *
	 * @param [encoding] {String} ignored
	 * @param [start] {Number}
	 * @param [end] {Number}
	 * @returns {String}
	 */

	function toString(encoding, start, end) {
	  var f = (!isBufferShim && isBuffer(this)) ? this.toString : toString$1;
	  return f.apply(this, arguments);
	}

	/**
	 * @private
	 */

	function gen(method) {
	  return wrap;

	  function wrap() {
	    var f = this[method] || BufferLite[method];
	    return f.apply(this, arguments);
	  }
	}

	var write = gen("write");



	var prototype = Object.freeze({
	  copy: copy,
	  slice: slice,
	  toString: toString,
	  write: write
	});

	var hasBuffer = buffer && !!buffer.isBuffer;
	var hasArrayBuffer = ("undefined" !== typeof ArrayBuffer);

	function _is(name, key) {
	  /* jshint eqnull:true */
	  name = "[object " + name + "]";
	  return function(value) {
	    return (value != null) && {}.toString.call(key ? value[key] : value) === name;
	  };
	}

	function _false() {
	  return false;
	}

	var _isArrayBuffer = _is("ArrayBuffer");

	var isArrayBuffer = hasArrayBuffer ? function(value) {
	  return (value instanceof ArrayBuffer) || _isArrayBuffer(value);
	} : _false;

	var isBuffer = hasBuffer ? buffer.isBuffer : _false;
	var isView = hasArrayBuffer ? (ArrayBuffer.isView || _is("ArrayBuffer", "buffer")) : _false;

	/**
	 * @param value {Array|ArrayBuffer|Buffer|String}
	 * @returns {Buffer|Uint8Array|Array}
	 */

	function from(value) {
	  if (typeof value === "string") {
	    return fromString.call(this, value);
	  } else {
	    return auto(this).from(value);
	  }
	}

	/**
	 * @param size {Number}
	 * @returns {Buffer|Uint8Array|Array}
	 */

	function alloc(size) {
	  return auto(this).alloc(size);
	}

	/**
	 * @param list {Array} array of (Buffer|Uint8Array|Array)s
	 * @param [length]
	 * @returns {Buffer|Uint8Array|Array}
	 */

	function concat(list, length) {
	  if (!length) {
	    length = 0;
	    Array.prototype.forEach.call(list, dryrun);
	  }
	  var ref = (typeof this !== 'undefined') && this || list[0];
	  var result = alloc.call(ref, length);
	  var offset = 0;
	  Array.prototype.forEach.call(list, append);
	  return result;

	  function dryrun(buffer) {
	    length += buffer.length;
	  }

	  function append(buffer) {
	    offset += copy.call(buffer, result, offset);
	  }
	}

	/**
	 * @private
	 */

	function fromString(value) {
	  var expected = value.length * 3;
	  var that = alloc.call(this, expected);
	  var actual = write.call(that, value);
	  if (expected !== actual) {
	    that = slice.call(that, 0, actual);
	  }
	  return that;
	}

	function auto(that) {
	  return isBuffer(that) ? Buffer$2
	    : isView(that) ? Uint8Array$1
	    : isArray(that) ? Array$1
	    : hasBuffer ? Buffer$2
	    : hasArrayBuffer ? Uint8Array$1
	    : Array$1;
	}



	var Bufferish = Object.freeze({
	  global: buffer,
	  hasBuffer: hasBuffer,
	  hasArrayBuffer: hasArrayBuffer,
	  isArray: isArray,
	  isArrayBuffer: isArrayBuffer,
	  isBuffer: isBuffer,
	  isView: isView,
	  alloc: alloc,
	  concat: concat,
	  from: from,
	  Array: Array$1,
	  Buffer: Buffer$2,
	  Uint8Array: Uint8Array$1,
	  prototype: prototype
	});

	function ExtBuffer(buffer, type) {
	  if (!(this instanceof ExtBuffer)) return new ExtBuffer(buffer, type);
	  this.buffer = from(buffer);
	  this.type = type;
	}

	var Buffer$4 = buffer;
	var packTypedArray = from$3;

	var ERROR_COLUMNS = {name: 1, message: 1, stack: 1, columnNumber: 1, fileName: 1, lineNumber: 1};

	function setExtPackers(codec) {
	  codec.addExtPacker(0x0E, Error, [packError, encode]);
	  codec.addExtPacker(0x01, EvalError, [packError, encode]);
	  codec.addExtPacker(0x02, RangeError, [packError, encode]);
	  codec.addExtPacker(0x03, ReferenceError, [packError, encode]);
	  codec.addExtPacker(0x04, SyntaxError, [packError, encode]);
	  codec.addExtPacker(0x05, TypeError, [packError, encode]);
	  codec.addExtPacker(0x06, URIError, [packError, encode]);

	  codec.addExtPacker(0x0A, RegExp, [packRegExp, encode]);
	  codec.addExtPacker(0x0B, Boolean, [packValueOf, encode]);
	  codec.addExtPacker(0x0C, String, [packValueOf, encode]);
	  codec.addExtPacker(0x0D, Date, [Number, encode]);
	  codec.addExtPacker(0x0F, Number, [packValueOf, encode]);

	  if ("undefined" !== typeof Uint8Array) {
	    codec.addExtPacker(0x11, Int8Array, packTypedArray);
	    codec.addExtPacker(0x12, Uint8Array, packTypedArray);
	    codec.addExtPacker(0x13, Int16Array, packTypedArray);
	    codec.addExtPacker(0x14, Uint16Array, packTypedArray);
	    codec.addExtPacker(0x15, Int32Array, packTypedArray);
	    codec.addExtPacker(0x16, Uint32Array, packTypedArray);
	    codec.addExtPacker(0x17, Float32Array, packTypedArray);

	    // PhantomJS/1.9.7 doesn't have Float64Array
	    if ("undefined" !== typeof Float64Array) {
	      codec.addExtPacker(0x18, Float64Array, packTypedArray);
	    }

	    // IE10 doesn't have Uint8ClampedArray
	    if ("undefined" !== typeof Uint8ClampedArray) {
	      codec.addExtPacker(0x19, Uint8ClampedArray, packTypedArray);
	    }

	    codec.addExtPacker(0x1A, ArrayBuffer, packTypedArray);
	    codec.addExtPacker(0x1D, DataView, packTypedArray);
	  }

	  if (hasBuffer) {
	    codec.addExtPacker(0x1B, Buffer$4, from);
	  }
	}

	function packValueOf(value) {
	  return (value).valueOf();
	}

	function packRegExp(value) {
	  value = RegExp.prototype.toString.call(value).split("/");
	  value.shift();
	  var out = [value.pop()];
	  out.unshift(value.join("/"));
	  return out;
	}

	function packError(value) {
	  var out = {};
	  for (var key in ERROR_COLUMNS) {
	    out[key] = value[key];
	  }
	  return out;
	}

	var int64Buffer = createCommonjsModule(function (module, exports) {
	// int64-buffer.js

	/*jshint -W018 */ // Confusing use of '!'.
	/*jshint -W030 */ // Expected an assignment or function call and instead saw an expression.
	/*jshint -W093 */ // Did you mean to return a conditional instead of an assignment?

	var Uint64BE, Int64BE, Uint64LE, Int64LE;

	!function(exports) {
	  // constants

	  var UNDEFINED = "undefined";
	  var BUFFER = (UNDEFINED !== typeof Buffer) && Buffer;
	  var UINT8ARRAY = (UNDEFINED !== typeof Uint8Array) && Uint8Array;
	  var ARRAYBUFFER = (UNDEFINED !== typeof ArrayBuffer) && ArrayBuffer;
	  var ZERO = [0, 0, 0, 0, 0, 0, 0, 0];
	  var isArray = Array.isArray || _isArray;
	  var BIT32 = 4294967296;
	  var BIT24 = 16777216;

	  // storage class

	  var storage; // Array;

	  // generate classes

	  Uint64BE = factory("Uint64BE", true, true);
	  Int64BE = factory("Int64BE", true, false);
	  Uint64LE = factory("Uint64LE", false, true);
	  Int64LE = factory("Int64LE", false, false);

	  // class factory

	  function factory(name, bigendian, unsigned) {
	    var posH = bigendian ? 0 : 4;
	    var posL = bigendian ? 4 : 0;
	    var pos0 = bigendian ? 0 : 3;
	    var pos1 = bigendian ? 1 : 2;
	    var pos2 = bigendian ? 2 : 1;
	    var pos3 = bigendian ? 3 : 0;
	    var fromPositive = bigendian ? fromPositiveBE : fromPositiveLE;
	    var fromNegative = bigendian ? fromNegativeBE : fromNegativeLE;
	    var proto = Int64.prototype;
	    var isName = "is" + name;
	    var _isInt64 = "_" + isName;

	    // properties
	    proto.buffer = void 0;
	    proto.offset = 0;
	    proto[_isInt64] = true;

	    // methods
	    proto.toNumber = toNumber;
	    proto.toString = toString;
	    proto.toJSON = toNumber;
	    proto.toArray = toArray;

	    // add .toBuffer() method only when Buffer available
	    if (BUFFER) proto.toBuffer = toBuffer;

	    // add .toArrayBuffer() method only when Uint8Array available
	    if (UINT8ARRAY) proto.toArrayBuffer = toArrayBuffer;

	    // isUint64BE, isInt64BE
	    Int64[isName] = isInt64;

	    // CommonJS
	    exports[name] = Int64;

	    return Int64;

	    // constructor
	    function Int64(buffer, offset, value, raddix) {
	      if (!(this instanceof Int64)) return new Int64(buffer, offset, value, raddix);
	      return init(this, buffer, offset, value, raddix);
	    }

	    // isUint64BE, isInt64BE
	    function isInt64(b) {
	      return !!(b && b[_isInt64]);
	    }

	    // initializer
	    function init(that, buffer, offset, value, raddix) {
	      if (UINT8ARRAY && ARRAYBUFFER) {
	        if (buffer instanceof ARRAYBUFFER) buffer = new UINT8ARRAY(buffer);
	        if (value instanceof ARRAYBUFFER) value = new UINT8ARRAY(value);
	      }

	      // Int64BE() style
	      if (!buffer && !offset && !value && !storage) {
	        // shortcut to initialize with zero
	        that.buffer = newArray(ZERO, 0);
	        return;
	      }

	      // Int64BE(value, raddix) style
	      if (!isValidBuffer(buffer, offset)) {
	        var _storage = storage || Array;
	        raddix = offset;
	        value = buffer;
	        offset = 0;
	        buffer = new _storage(8);
	      }

	      that.buffer = buffer;
	      that.offset = offset |= 0;

	      // Int64BE(buffer, offset) style
	      if (UNDEFINED === typeof value) return;

	      // Int64BE(buffer, offset, value, raddix) style
	      if ("string" === typeof value) {
	        fromString(buffer, offset, value, raddix || 10);
	      } else if (isValidBuffer(value, raddix)) {
	        fromArray(buffer, offset, value, raddix);
	      } else if ("number" === typeof raddix) {
	        writeInt32(buffer, offset + posH, value); // high
	        writeInt32(buffer, offset + posL, raddix); // low
	      } else if (value > 0) {
	        fromPositive(buffer, offset, value); // positive
	      } else if (value < 0) {
	        fromNegative(buffer, offset, value); // negative
	      } else {
	        fromArray(buffer, offset, ZERO, 0); // zero, NaN and others
	      }
	    }

	    function fromString(buffer, offset, str, raddix) {
	      var pos = 0;
	      var len = str.length;
	      var high = 0;
	      var low = 0;
	      if (str[0] === "-") pos++;
	      var sign = pos;
	      while (pos < len) {
	        var chr = parseInt(str[pos++], raddix);
	        if (!(chr >= 0)) break; // NaN
	        low = low * raddix + chr;
	        high = high * raddix + Math.floor(low / BIT32);
	        low %= BIT32;
	      }
	      if (sign) {
	        high = ~high;
	        if (low) {
	          low = BIT32 - low;
	        } else {
	          high++;
	        }
	      }
	      writeInt32(buffer, offset + posH, high);
	      writeInt32(buffer, offset + posL, low);
	    }

	    function toNumber() {
	      var buffer = this.buffer;
	      var offset = this.offset;
	      var high = readInt32(buffer, offset + posH);
	      var low = readInt32(buffer, offset + posL);
	      if (!unsigned) high |= 0; // a trick to get signed
	      return high ? (high * BIT32 + low) : low;
	    }

	    function toString(radix) {
	      var buffer = this.buffer;
	      var offset = this.offset;
	      var high = readInt32(buffer, offset + posH);
	      var low = readInt32(buffer, offset + posL);
	      var str = "";
	      var sign = !unsigned && (high & 0x80000000);
	      if (sign) {
	        high = ~high;
	        low = BIT32 - low;
	      }
	      radix = radix || 10;
	      while (1) {
	        var mod = (high % radix) * BIT32 + low;
	        high = Math.floor(high / radix);
	        low = Math.floor(mod / radix);
	        str = (mod % radix).toString(radix) + str;
	        if (!high && !low) break;
	      }
	      if (sign) {
	        str = "-" + str;
	      }
	      return str;
	    }

	    function writeInt32(buffer, offset, value) {
	      buffer[offset + pos3] = value & 255;
	      value = value >> 8;
	      buffer[offset + pos2] = value & 255;
	      value = value >> 8;
	      buffer[offset + pos1] = value & 255;
	      value = value >> 8;
	      buffer[offset + pos0] = value & 255;
	    }

	    function readInt32(buffer, offset) {
	      return (buffer[offset + pos0] * BIT24) +
	        (buffer[offset + pos1] << 16) +
	        (buffer[offset + pos2] << 8) +
	        buffer[offset + pos3];
	    }
	  }

	  function toArray(raw) {
	    var buffer = this.buffer;
	    var offset = this.offset;
	    storage = null; // Array
	    if (raw !== false && offset === 0 && buffer.length === 8 && isArray(buffer)) return buffer;
	    return newArray(buffer, offset);
	  }

	  function toBuffer(raw) {
	    var buffer = this.buffer;
	    var offset = this.offset;
	    storage = BUFFER;
	    if (raw !== false && offset === 0 && buffer.length === 8 && Buffer.isBuffer(buffer)) return buffer;
	    var dest = new BUFFER(8);
	    fromArray(dest, 0, buffer, offset);
	    return dest;
	  }

	  function toArrayBuffer(raw) {
	    var buffer = this.buffer;
	    var offset = this.offset;
	    var arrbuf = buffer.buffer;
	    storage = UINT8ARRAY;
	    if (raw !== false && offset === 0 && (arrbuf instanceof ARRAYBUFFER) && arrbuf.byteLength === 8) return arrbuf;
	    var dest = new UINT8ARRAY(8);
	    fromArray(dest, 0, buffer, offset);
	    return dest.buffer;
	  }

	  function isValidBuffer(buffer, offset) {
	    var len = buffer && buffer.length;
	    offset |= 0;
	    return len && (offset + 8 <= len) && ("string" !== typeof buffer[offset]);
	  }

	  function fromArray(destbuf, destoff, srcbuf, srcoff) {
	    destoff |= 0;
	    srcoff |= 0;
	    for (var i = 0; i < 8; i++) {
	      destbuf[destoff++] = srcbuf[srcoff++] & 255;
	    }
	  }

	  function newArray(buffer, offset) {
	    return Array.prototype.slice.call(buffer, offset, offset + 8);
	  }

	  function fromPositiveBE(buffer, offset, value) {
	    var pos = offset + 8;
	    while (pos > offset) {
	      buffer[--pos] = value & 255;
	      value /= 256;
	    }
	  }

	  function fromNegativeBE(buffer, offset, value) {
	    var pos = offset + 8;
	    value++;
	    while (pos > offset) {
	      buffer[--pos] = ((-value) & 255) ^ 255;
	      value /= 256;
	    }
	  }

	  function fromPositiveLE(buffer, offset, value) {
	    var end = offset + 8;
	    while (offset < end) {
	      buffer[offset++] = value & 255;
	      value /= 256;
	    }
	  }

	  function fromNegativeLE(buffer, offset, value) {
	    var end = offset + 8;
	    value++;
	    while (offset < end) {
	      buffer[offset++] = ((-value) & 255) ^ 255;
	      value /= 256;
	    }
	  }

	  // https://github.com/retrofox/is-array
	  function _isArray(val) {
	    return !!val && "[object Array]" == Object.prototype.toString.call(val);
	  }

	}(typeof exports === 'object' && typeof exports.nodeName !== 'string' ? exports : (commonjsGlobal || {}));
	});

	interopDefault(int64Buffer);

	var index$1 = createCommonjsModule(function (module, exports) {
	exports.read = function (buffer, offset, isLE, mLen, nBytes) {
	  var e, m
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var nBits = -7
	  var i = isLE ? (nBytes - 1) : 0
	  var d = isLE ? -1 : 1
	  var s = buffer[offset + i]

	  i += d

	  e = s & ((1 << (-nBits)) - 1)
	  s >>= (-nBits)
	  nBits += eLen
	  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  m = e & ((1 << (-nBits)) - 1)
	  e >>= (-nBits)
	  nBits += mLen
	  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  if (e === 0) {
	    e = 1 - eBias
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity)
	  } else {
	    m = m + Math.pow(2, mLen)
	    e = e - eBias
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
	}

	exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
	  var i = isLE ? 0 : (nBytes - 1)
	  var d = isLE ? 1 : -1
	  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

	  value = Math.abs(value)

	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0
	    e = eMax
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2)
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--
	      c *= 2
	    }
	    if (e + eBias >= 1) {
	      value += rt / c
	    } else {
	      value += rt * Math.pow(2, 1 - eBias)
	    }
	    if (value * c >= 2) {
	      e++
	      c /= 2
	    }

	    if (e + eBias >= eMax) {
	      m = 0
	      e = eMax
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * Math.pow(2, mLen)
	      e = e + eBias
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
	      e = 0
	    }
	  }

	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

	  e = (e << mLen) | m
	  eLen += mLen
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

	  buffer[offset + i - d] |= s * 128
	}
	});

	interopDefault(index$1);
	var write$2 = index$1.write;
	var read = index$1.read;

	// write-unit8.js

	var constant = new Array(256);

	function write0(type) {
	  return function(encoder) {
	    var offset = encoder.reserve(1);
	    encoder.buffer[offset] = type;
	  };
	}

	for (var i = 0x00; i <= 0xFF; i++) {
	  constant[i] = write0(i);
	}

	var Uint64BE$1 = undefined;
	var Int64BE$1 = undefined;

	var Buffer$5 = buffer;
	var IS_BUFFER_SHIM = hasBuffer && ("TYPED_ARRAY_SUPPORT" in Buffer$5);
	var NO_TYPED_ARRAY = IS_BUFFER_SHIM && !Buffer$5.TYPED_ARRAY_SUPPORT;
	var Buffer_prototype = hasBuffer && Buffer$5.prototype || {};

	function getWriteToken(options) {
	  if (options && options.uint8array) {
	    return init_uint8array();
	  } else if (NO_TYPED_ARRAY || (hasBuffer && options && options.safe)) {
	    return init_safe();
	  } else {
	    return init_token();
	  }
	}

	function init_uint8array() {
	  var token = init_token();

	  // float 32 -- 0xca
	  // float 64 -- 0xcb
	  token[0xca] = writeN(0xca, 4, writeFloatBE);
	  token[0xcb] = writeN(0xcb, 8, writeDoubleBE);

	  return token;
	}

	// Node.js and browsers with TypedArray

	function init_token() {
	  // (immediate values)
	  // positive fixint -- 0x00 - 0x7f
	  // nil -- 0xc0
	  // false -- 0xc2
	  // true -- 0xc3
	  // negative fixint -- 0xe0 - 0xff
	  var token = constant.slice();

	  // bin 8 -- 0xc4
	  // bin 16 -- 0xc5
	  // bin 32 -- 0xc6
	  token[0xc4] = write1(0xc4);
	  token[0xc5] = write2(0xc5);
	  token[0xc6] = write4(0xc6);

	  // ext 8 -- 0xc7
	  // ext 16 -- 0xc8
	  // ext 32 -- 0xc9
	  token[0xc7] = write1(0xc7);
	  token[0xc8] = write2(0xc8);
	  token[0xc9] = write4(0xc9);

	  // float 32 -- 0xca
	  // float 64 -- 0xcb
	  token[0xca] = writeN(0xca, 4, (Buffer_prototype.writeFloatBE || writeFloatBE), true);
	  token[0xcb] = writeN(0xcb, 8, (Buffer_prototype.writeDoubleBE || writeDoubleBE), true);

	  // uint 8 -- 0xcc
	  // uint 16 -- 0xcd
	  // uint 32 -- 0xce
	  // uint 64 -- 0xcf
	  token[0xcc] = write1(0xcc);
	  token[0xcd] = write2(0xcd);
	  token[0xce] = write4(0xce);
	  token[0xcf] = writeN(0xcf, 8, writeUInt64BE);

	  // int 8 -- 0xd0
	  // int 16 -- 0xd1
	  // int 32 -- 0xd2
	  // int 64 -- 0xd3
	  token[0xd0] = write1(0xd0);
	  token[0xd1] = write2(0xd1);
	  token[0xd2] = write4(0xd2);
	  token[0xd3] = writeN(0xd3, 8, writeInt64BE);

	  // str 8 -- 0xd9
	  // str 16 -- 0xda
	  // str 32 -- 0xdb
	  token[0xd9] = write1(0xd9);
	  token[0xda] = write2(0xda);
	  token[0xdb] = write4(0xdb);

	  // array 16 -- 0xdc
	  // array 32 -- 0xdd
	  token[0xdc] = write2(0xdc);
	  token[0xdd] = write4(0xdd);

	  // map 16 -- 0xde
	  // map 32 -- 0xdf
	  token[0xde] = write2(0xde);
	  token[0xdf] = write4(0xdf);

	  return token;
	}

	// safe mode: for old browsers and who needs asserts

	function init_safe() {
	  // (immediate values)
	  // positive fixint -- 0x00 - 0x7f
	  // nil -- 0xc0
	  // false -- 0xc2
	  // true -- 0xc3
	  // negative fixint -- 0xe0 - 0xff
	  var token = constant.slice();

	  // bin 8 -- 0xc4
	  // bin 16 -- 0xc5
	  // bin 32 -- 0xc6
	  token[0xc4] = writeN(0xc4, 1, Buffer$5.prototype.writeUInt8);
	  token[0xc5] = writeN(0xc5, 2, Buffer$5.prototype.writeUInt16BE);
	  token[0xc6] = writeN(0xc6, 4, Buffer$5.prototype.writeUInt32BE);

	  // ext 8 -- 0xc7
	  // ext 16 -- 0xc8
	  // ext 32 -- 0xc9
	  token[0xc7] = writeN(0xc7, 1, Buffer$5.prototype.writeUInt8);
	  token[0xc8] = writeN(0xc8, 2, Buffer$5.prototype.writeUInt16BE);
	  token[0xc9] = writeN(0xc9, 4, Buffer$5.prototype.writeUInt32BE);

	  // float 32 -- 0xca
	  // float 64 -- 0xcb
	  token[0xca] = writeN(0xca, 4, Buffer$5.prototype.writeFloatBE);
	  token[0xcb] = writeN(0xcb, 8, Buffer$5.prototype.writeDoubleBE);

	  // uint 8 -- 0xcc
	  // uint 16 -- 0xcd
	  // uint 32 -- 0xce
	  // uint 64 -- 0xcf
	  token[0xcc] = writeN(0xcc, 1, Buffer$5.prototype.writeUInt8);
	  token[0xcd] = writeN(0xcd, 2, Buffer$5.prototype.writeUInt16BE);
	  token[0xce] = writeN(0xce, 4, Buffer$5.prototype.writeUInt32BE);
	  token[0xcf] = writeN(0xcf, 8, writeUInt64BE);

	  // int 8 -- 0xd0
	  // int 16 -- 0xd1
	  // int 32 -- 0xd2
	  // int 64 -- 0xd3
	  token[0xd0] = writeN(0xd0, 1, Buffer$5.prototype.writeInt8);
	  token[0xd1] = writeN(0xd1, 2, Buffer$5.prototype.writeInt16BE);
	  token[0xd2] = writeN(0xd2, 4, Buffer$5.prototype.writeInt32BE);
	  token[0xd3] = writeN(0xd3, 8, writeInt64BE);

	  // str 8 -- 0xd9
	  // str 16 -- 0xda
	  // str 32 -- 0xdb
	  token[0xd9] = writeN(0xd9, 1, Buffer$5.prototype.writeUInt8);
	  token[0xda] = writeN(0xda, 2, Buffer$5.prototype.writeUInt16BE);
	  token[0xdb] = writeN(0xdb, 4, Buffer$5.prototype.writeUInt32BE);

	  // array 16 -- 0xdc
	  // array 32 -- 0xdd
	  token[0xdc] = writeN(0xdc, 2, Buffer$5.prototype.writeUInt16BE);
	  token[0xdd] = writeN(0xdd, 4, Buffer$5.prototype.writeUInt32BE);

	  // map 16 -- 0xde
	  // map 32 -- 0xdf
	  token[0xde] = writeN(0xde, 2, Buffer$5.prototype.writeUInt16BE);
	  token[0xdf] = writeN(0xdf, 4, Buffer$5.prototype.writeUInt32BE);

	  return token;
	}

	function write1(type) {
	  return function(encoder, value) {
	    var offset = encoder.reserve(2);
	    var buffer = encoder.buffer;
	    buffer[offset++] = type;
	    buffer[offset] = value;
	  };
	}

	function write2(type) {
	  return function(encoder, value) {
	    var offset = encoder.reserve(3);
	    var buffer = encoder.buffer;
	    buffer[offset++] = type;
	    buffer[offset++] = value >>> 8;
	    buffer[offset] = value;
	  };
	}

	function write4(type) {
	  return function(encoder, value) {
	    var offset = encoder.reserve(5);
	    var buffer = encoder.buffer;
	    buffer[offset++] = type;
	    buffer[offset++] = value >>> 24;
	    buffer[offset++] = value >>> 16;
	    buffer[offset++] = value >>> 8;
	    buffer[offset] = value;
	  };
	}

	function writeN(type, len, method, noAssert) {
	  return function(encoder, value) {
	    var offset = encoder.reserve(len + 1);
	    encoder.buffer[offset++] = type;
	    method.call(encoder.buffer, value, offset, noAssert);
	  };
	}

	function writeUInt64BE(value, offset) {
	  new Uint64BE$1(this, offset, value);
	}

	function writeInt64BE(value, offset) {
	  new Int64BE$1(this, offset, value);
	}

	function writeFloatBE(value, offset) {
	  write$2(this, value, offset, false, 23, 4);
	}

	function writeDoubleBE(value, offset) {
	  write$2(this, value, offset, false, 52, 8);
	}

	var Uint64BE = undefined;
	var Int64BE = undefined;

	var HAS_UINT8ARRAY = ("undefined" !== typeof Uint8Array);
	var HAS_MAP = ("undefined" !== typeof Map);

	var extmap = [];
	extmap[1] = 0xd4;
	extmap[2] = 0xd5;
	extmap[4] = 0xd6;
	extmap[8] = 0xd7;
	extmap[16] = 0xd8;

	function getWriteType(options) {
	  var token = getWriteToken(options);
	  var useraw = options && options.useraw;
	  var binarraybuffer = HAS_UINT8ARRAY && options && options.binarraybuffer;
	  var isBuffer$$ = binarraybuffer ? isArrayBuffer : isBuffer;
	  var bin = binarraybuffer ? bin_arraybuffer : bin_buffer;
	  var usemap = HAS_MAP && options && options.usemap;
	  var map = usemap ? map_to_map : obj_to_map;

	  var writeType = {
	    "boolean": bool,
	    "function": nil,
	    "number": number,
	    "object": (useraw ? object_raw : object),
	    "string": _string(useraw ? raw_head_size : str_head_size),
	    "symbol": nil,
	    "undefined": nil
	  };

	  return writeType;

	  // false -- 0xc2
	  // true -- 0xc3
	  function bool(encoder, value) {
	    var type = value ? 0xc3 : 0xc2;
	    token[type](encoder, value);
	  }

	  function number(encoder, value) {
	    var ivalue = value | 0;
	    var type;
	    if (value !== ivalue) {
	      // float 64 -- 0xcb
	      type = 0xcb;
	      token[type](encoder, value);
	      return;
	    } else if (-0x20 <= ivalue && ivalue <= 0x7F) {
	      // positive fixint -- 0x00 - 0x7f
	      // negative fixint -- 0xe0 - 0xff
	      type = ivalue & 0xFF;
	    } else if (0 <= ivalue) {
	      // uint 8 -- 0xcc
	      // uint 16 -- 0xcd
	      // uint 32 -- 0xce
	      type = (ivalue <= 0xFF) ? 0xcc : (ivalue <= 0xFFFF) ? 0xcd : 0xce;
	    } else {
	      // int 8 -- 0xd0
	      // int 16 -- 0xd1
	      // int 32 -- 0xd2
	      type = (-0x80 <= ivalue) ? 0xd0 : (-0x8000 <= ivalue) ? 0xd1 : 0xd2;
	    }
	    token[type](encoder, ivalue);
	  }

	  // uint 64 -- 0xcf
	  function uint64(encoder, value) {
	    var type = 0xcf;
	    token[type](encoder, value.toArray());
	  }

	  // int 64 -- 0xd3
	  function int64(encoder, value) {
	    var type = 0xd3;
	    token[type](encoder, value.toArray());
	  }

	  // str 8 -- 0xd9
	  // str 16 -- 0xda
	  // str 32 -- 0xdb
	  // fixstr -- 0xa0 - 0xbf
	  function str_head_size(length) {
	    return (length < 32) ? 1 : (length <= 0xFF) ? 2 : (length <= 0xFFFF) ? 3 : 5;
	  }

	  // raw 16 -- 0xda
	  // raw 32 -- 0xdb
	  // fixraw -- 0xa0 - 0xbf
	  function raw_head_size(length) {
	    return (length < 32) ? 1 : (length <= 0xFFFF) ? 3 : 5;
	  }

	  function _string(head_size) {
	    return string;

	    function string(encoder, value) {
	      // prepare buffer
	      var length = value.length;
	      var maxsize = 5 + length * 3;
	      encoder.offset = encoder.reserve(maxsize);
	      var buffer = encoder.buffer;

	      // expected header size
	      var expected = head_size(length);

	      // expected start point
	      var start = encoder.offset + expected;

	      // write string
	      length = write.call(buffer, value, start);

	      // actual header size
	      var actual = head_size(length);

	      // move content when needed
	      if (expected !== actual) {
	        var targetStart = start + actual - expected;
	        var end = start + length;
	        copy.call(buffer, buffer, targetStart, start, end);
	      }

	      // write header
	      var type = (actual === 1) ? (0xa0 + length) : (actual <= 3) ? (0xd7 + actual) : 0xdb;
	      token[type](encoder, length);

	      // move cursor
	      encoder.offset += length;
	    }
	  }

	  function object(encoder, value) {
	    // null
	    if (value === null) return nil(encoder, value);

	    // Buffer
	    if (isBuffer$$(value)) return bin(encoder, value);

	    // Array
	    if (isArray(value)) return array(encoder, value);

	    // int64-buffer objects
	    if (Uint64BE.isUint64BE(value)) return uint64(encoder, value);
	    if (Int64BE.isInt64BE(value)) return int64(encoder, value);

	    // ext formats
	    var packer = encoder.codec.getExtPacker(value);
	    if (packer) value = packer(value);
	    if (value instanceof ExtBuffer) return ext(encoder, value);

	    // plain old Objects or Map
	    map(encoder, value);
	  }

	  function object_raw(encoder, value) {
	    // Buffer
	    if (isBuffer$$(value)) return raw(encoder, value);

	    // others
	    object(encoder, value);
	  }

	  // nil -- 0xc0
	  function nil(encoder, value) {
	    var type = 0xc0;
	    token[type](encoder, value);
	  }

	  // fixarray -- 0x90 - 0x9f
	  // array 16 -- 0xdc
	  // array 32 -- 0xdd
	  function array(encoder, value) {
	    var length = value.length;
	    var type = (length < 16) ? (0x90 + length) : (length <= 0xFFFF) ? 0xdc : 0xdd;
	    token[type](encoder, length);

	    var encode = encoder.codec.encode;
	    for (var i = 0; i < length; i++) {
	      encode(encoder, value[i]);
	    }
	  }

	  // bin 8 -- 0xc4
	  // bin 16 -- 0xc5
	  // bin 32 -- 0xc6
	  function bin_buffer(encoder, value) {
	    var length = value.length;
	    var type = (length < 0xFF) ? 0xc4 : (length <= 0xFFFF) ? 0xc5 : 0xc6;
	    token[type](encoder, length);
	    encoder.send(value);
	  }

	  function bin_arraybuffer(encoder, value) {
	    bin_buffer(encoder, new Uint8Array(value));
	  }

	  // fixext 1 -- 0xd4
	  // fixext 2 -- 0xd5
	  // fixext 4 -- 0xd6
	  // fixext 8 -- 0xd7
	  // fixext 16 -- 0xd8
	  // ext 8 -- 0xc7
	  // ext 16 -- 0xc8
	  // ext 32 -- 0xc9
	  function ext(encoder, value) {
	    var buffer = value.buffer;
	    var length = buffer.length;
	    var type = extmap[length] || ((length < 0xFF) ? 0xc7 : (length <= 0xFFFF) ? 0xc8 : 0xc9);
	    token[type](encoder, length);
	    constant[value.type](encoder);
	    encoder.send(buffer);
	  }

	  // fixmap -- 0x80 - 0x8f
	  // map 16 -- 0xde
	  // map 32 -- 0xdf
	  function obj_to_map(encoder, value) {
	    var keys = Object.keys(value);
	    var length = keys.length;
	    var type = (length < 16) ? (0x80 + length) : (length <= 0xFFFF) ? 0xde : 0xdf;
	    token[type](encoder, length);

	    var encode = encoder.codec.encode;
	    keys.forEach(function(key) {
	      encode(encoder, key);
	      encode(encoder, value[key]);
	    });
	  }

	  // fixmap -- 0x80 - 0x8f
	  // map 16 -- 0xde
	  // map 32 -- 0xdf
	  function map_to_map(encoder, value) {
	    if (!(value instanceof Map)) return obj_to_map(encoder, value);

	    var length = value.size;
	    var type = (length < 16) ? (0x80 + length) : (length <= 0xFFFF) ? 0xde : 0xdf;
	    token[type](encoder, length);

	    var encode = encoder.codec.encode;
	    value.forEach(function(val, key, m) {
	      encode(encoder, key);
	      encode(encoder, val);
	    });
	  }

	  // raw 16 -- 0xda
	  // raw 32 -- 0xdb
	  // fixraw -- 0xa0 - 0xbf
	  function raw(encoder, value) {
	    var length = value.length;
	    var type = (length < 32) ? (0xa0 + length) : (length <= 0xFFFF) ? 0xda : 0xdb;
	    token[type](encoder, length);
	    encoder.send(value);
	  }
	}

	function Codec(options) {
	  if (!(this instanceof Codec)) return new Codec(options);
	  this.options = options;
	  this.init();
	}

	Codec.prototype.init = function() {
	  var options = this.options;

	  if (options && options.uint8array) {
	    this.bufferish = Uint8Array$1;
	  }

	  return this;
	};

	function install(props) {
	  for (var key in props) {
	    Codec.prototype[key] = add(Codec.prototype[key], props[key]);
	  }
	}

	function add(a, b) {
	  return (a && b) ? ab : (a || b);

	  function ab() {
	    a.apply(this, arguments);
	    return b.apply(this, arguments);
	  }
	}

	function join(filters) {
	  filters = filters.slice();

	  return function(value) {
	    return filters.reduce(iterator, value);
	  };

	  function iterator(value, filter) {
	    return filter(value);
	  }
	}

	function filter(filter) {
	  return isArray(filter) ? join(filter) : filter;
	}

	// @public
	// msgpack.createCodec()

	function createCodec(options) {
	  return new Codec(options);
	}

	// default shared codec

	var preset$1 = createCodec({preset: true});

	install({
	  addExtPacker: addExtPacker,
	  getExtPacker: getExtPacker,
	  init: init
	});

	var preset = init.call(preset$1);

	function getEncoder(options) {
	  var writeType = getWriteType(options);
	  return encode;

	  function encode(encoder, value) {
	    var func = writeType[typeof value];
	    if (!func) throw new Error("Unsupported type \"" + (typeof value) + "\": " + value);
	    func(encoder, value);
	  }
	}

	function init() {
	  var options = this.options;
	  this.encode = getEncoder(options);

	  if (options && options.preset) {
	    setExtPackers(this);
	  }

	  return this;
	}

	function addExtPacker(etype, Class, packer) {
	  packer = filter(packer);
	  var name = Class.name;
	  if (name && name !== "Object") {
	    var packers = this.extPackers || (this.extPackers = {});
	    packers[name] = extPacker;
	  } else {
	    // fallback for IE
	    var list = this.extEncoderList || (this.extEncoderList = []);
	    list.unshift([Class, extPacker]);
	  }

	  function extPacker(value) {
	    if (packer) value = packer(value);
	    return new ExtBuffer(value, etype);
	  }
	}

	function getExtPacker(value) {
	  var packers = this.extPackers || (this.extPackers = {});
	  var c = value.constructor;
	  var e = c && c.name && packers[c.name];
	  if (e) return e;

	  // fallback for IE
	  var list = this.extEncoderList || (this.extEncoderList = []);
	  var len = list.length;
	  for (var i = 0; i < len; i++) {
	    var pair = list[i];
	    if (c === pair[0]) return pair[1];
	  }
	}

	var MIN_BUFFER_SIZE = 2048;
	var MAX_BUFFER_SIZE = 65536;
	var BUFFER_SHORTAGE = "BUFFER_SHORTAGE";

	function FlexDecoder() {
	  if (!(this instanceof FlexDecoder)) return new FlexDecoder();
	}

	function FlexEncoder() {
	  if (!(this instanceof FlexEncoder)) return new FlexEncoder();
	}

	FlexDecoder.mixin = mixinFactory(getDecoderMethods());
	FlexDecoder.mixin(FlexDecoder.prototype);

	FlexEncoder.mixin = mixinFactory(getEncoderMethods());
	FlexEncoder.mixin(FlexEncoder.prototype);

	function getDecoderMethods() {
	  return {
	    bufferish: Bufferish,
	    write: write,
	    fetch: fetch,
	    flush: flush,
	    push: push,
	    pull: pull,
	    read: read$1,
	    reserve: reserve,
	    offset: 0
	  };

	  function write(chunk) {
	    var prev = this.offset ? slice.call(this.buffer, this.offset) : this.buffer;
	    this.buffer = prev ? (chunk ? this.bufferish.concat([prev, chunk]) : prev) : chunk;
	    this.offset = 0;
	  }

	  function flush() {
	    while (this.offset < this.buffer.length) {
	      var start = this.offset;
	      var value;
	      try {
	        value = this.fetch();
	      } catch (e) {
	        if (e && e.message != BUFFER_SHORTAGE) throw e;
	        // rollback
	        this.offset = start;
	        break;
	      }
	      this.push(value);
	    }
	  }

	  function reserve(length) {
	    var start = this.offset;
	    var end = start + length;
	    if (end > this.buffer.length) throw new Error(BUFFER_SHORTAGE);
	    this.offset = end;
	    return start;
	  }
	}

	function getEncoderMethods() {
	  return {
	    bufferish: Bufferish,
	    write: write$3,
	    fetch: fetch,
	    flush: flush,
	    push: push,
	    pull: pull,
	    read: read$1,
	    reserve: reserve,
	    send: send,
	    maxBufferSize: MAX_BUFFER_SIZE,
	    minBufferSize: MIN_BUFFER_SIZE,
	    offset: 0,
	    start: 0
	  };

	  function fetch() {
	    var start = this.start;
	    if (start < this.offset) {
	      var end = this.start = this.offset;
	      return slice.call(this.buffer, start, end);
	    }
	  }

	  function flush() {
	    while (this.start < this.offset) {
	      var value = this.fetch();
	      if (value) this.push(value);
	    }
	  }

	  function pull() {
	    var buffers = this.buffers || (this.buffers = []);
	    var chunk = buffers.length > 1 ? this.bufferish.concat(buffers) : buffers[0];
	    buffers.length = 0; // buffer exhausted
	    return chunk;
	  }

	  function reserve(length) {
	    var req = length | 0;

	    if (this.buffer) {
	      var size = this.buffer.length;
	      var start = this.offset | 0;
	      var end = start + req;

	      // is it long enough?
	      if (end < size) {
	        this.offset = end;
	        return start;
	      }

	      // flush current buffer
	      this.flush();

	      // resize it to 2x current length
	      length = Math.max(length, Math.min(size * 2, this.maxBufferSize));
	    }

	    // minimum buffer size
	    length = Math.max(length, this.minBufferSize);

	    // allocate new buffer
	    this.buffer = this.bufferish.alloc(length);
	    this.start = 0;
	    this.offset = req;
	    return 0;
	  }

	  function send(buffer) {
	    var length = buffer.length;
	    if (length > this.minBufferSize) {
	      this.flush();
	      this.push(buffer);
	    } else {
	      var offset = this.reserve(length);
	      copy.call(buffer, this.buffer, offset);
	    }
	  }
	}

	// common methods

	function write$3() {
	  throw new Error("method not implemented: write()");
	}

	function fetch() {
	  throw new Error("method not implemented: fetch()");
	}

	function read$1() {
	  var length = this.buffers && this.buffers.length;

	  // fetch the first result
	  if (!length) return this.fetch();

	  // flush current buffer
	  this.flush();

	  // read from the results
	  return this.pull();
	}

	function push(chunk) {
	  var buffers = this.buffers || (this.buffers = []);
	  buffers.push(chunk);
	}

	function pull() {
	  var buffers = this.buffers || (this.buffers = []);
	  return buffers.shift();
	}

	function mixinFactory(source) {
	  return mixin;

	  function mixin(target) {
	    for (var key in source) {
	      target[key] = source[key];
	    }
	    return target;
	  }
	}

	FlexEncoder.mixin(EncodeBuffer.prototype);

	function EncodeBuffer(options) {
	  if (!(this instanceof EncodeBuffer)) return new EncodeBuffer(options);

	  if (options) {
	    this.options = options;
	    if (options.codec) {
	      var codec = this.codec = options.codec;
	      if (codec.bufferish) this.bufferish = codec.bufferish;
	    }
	  }
	}

	EncodeBuffer.prototype.codec = preset;

	EncodeBuffer.prototype.write = function(input) {
	  this.codec.encode(this, input);
	};

	function encode(input, options) {
	  var encoder = new EncodeBuffer(options);
	  encoder.write(input);
	  return encoder.read();
	}

	var Buffer$6 = buffer;

	var ERROR_COLUMNS$1 = {name: 1, message: 1, stack: 1, columnNumber: 1, fileName: 1, lineNumber: 1};

	function setExtUnpackers(codec) {
	  codec.addExtUnpacker(0x0E, [decode, unpackError(Error)]);
	  codec.addExtUnpacker(0x01, [decode, unpackError(EvalError)]);
	  codec.addExtUnpacker(0x02, [decode, unpackError(RangeError)]);
	  codec.addExtUnpacker(0x03, [decode, unpackError(ReferenceError)]);
	  codec.addExtUnpacker(0x04, [decode, unpackError(SyntaxError)]);
	  codec.addExtUnpacker(0x05, [decode, unpackError(TypeError)]);
	  codec.addExtUnpacker(0x06, [decode, unpackError(URIError)]);

	  codec.addExtUnpacker(0x0A, [decode, unpackRegExp]);
	  codec.addExtUnpacker(0x0B, [decode, unpackClass(Boolean)]);
	  codec.addExtUnpacker(0x0C, [decode, unpackClass(String)]);
	  codec.addExtUnpacker(0x0D, [decode, unpackClass(Date)]);
	  codec.addExtUnpacker(0x0F, [decode, unpackClass(Number)]);

	  if ("undefined" !== typeof Uint8Array) {
	    codec.addExtUnpacker(0x11, unpackClass(Int8Array));
	    codec.addExtUnpacker(0x12, unpackClass(Uint8Array));
	    codec.addExtUnpacker(0x13, [unpackArrayBuffer, unpackClass(Int16Array)]);
	    codec.addExtUnpacker(0x14, [unpackArrayBuffer, unpackClass(Uint16Array)]);
	    codec.addExtUnpacker(0x15, [unpackArrayBuffer, unpackClass(Int32Array)]);
	    codec.addExtUnpacker(0x16, [unpackArrayBuffer, unpackClass(Uint32Array)]);
	    codec.addExtUnpacker(0x17, [unpackArrayBuffer, unpackClass(Float32Array)]);

	    // PhantomJS/1.9.7 doesn't have Float64Array
	    if ("undefined" !== typeof Float64Array) {
	      codec.addExtUnpacker(0x18, [unpackArrayBuffer, unpackClass(Float64Array)]);
	    }

	    // IE10 doesn't have Uint8ClampedArray
	    if ("undefined" !== typeof Uint8ClampedArray) {
	      codec.addExtUnpacker(0x19, unpackClass(Uint8ClampedArray));
	    }

	    codec.addExtUnpacker(0x1A, unpackArrayBuffer);
	    codec.addExtUnpacker(0x1D, [unpackArrayBuffer, unpackClass(DataView)]);
	  }

	  if (hasBuffer) {
	    codec.addExtUnpacker(0x1B, unpackClass(Buffer$6));
	  }
	}

	function unpackRegExp(value) {
	  return RegExp.apply(null, value);
	}

	function unpackError(Class) {
	  return function(value) {
	    var out = new Class();
	    for (var key in ERROR_COLUMNS$1) {
	      out[key] = value[key];
	    }
	    return out;
	  };
	}

	function unpackClass(Class) {
	  return function(value) {
	    return new Class(value);
	  };
	}

	function unpackArrayBuffer(value) {
	  return (new Uint8Array(value)).buffer;
	}

	var Uint64BE$2 = undefined;
	var Int64BE$2 = undefined;

	var HAS_MAP$1 = ("undefined" !== typeof Map);
	var NO_ASSERT = true;

	function getReadFormat(options) {
	  var binarraybuffer = hasArrayBuffer && options && options.binarraybuffer;
	  var int64 = options && options.int64;
	  var usemap = HAS_MAP$1 && options && options.usemap;

	  return {
	    map: (usemap ? map_to_map : map_to_obj),
	    array: array,
	    str: str,
	    bin: (binarraybuffer ? bin_arraybuffer : bin_buffer),
	    ext: ext,
	    uint8: uint8,
	    uint16: uint16,
	    uint32: uint32,
	    uint64: read$2(8, int64 ? readUInt64BE_int64 : readUInt64BE),
	    int8: int8,
	    int16: int16,
	    int32: int32,
	    int64: read$2(8, int64 ? readInt64BE_int64 : readInt64BE),
	    float32: read$2(4, readFloatBE),
	    float64: read$2(8, readDoubleBE)
	  };
	}

	function map_to_obj(decoder, len) {
	  var value = {};
	  var i;
	  var k = new Array(len);
	  var v = new Array(len);

	  var decode = decoder.codec.decode;
	  for (i = 0; i < len; i++) {
	    k[i] = decode(decoder);
	    v[i] = decode(decoder);
	  }
	  for (i = 0; i < len; i++) {
	    value[k[i]] = v[i];
	  }
	  return value;
	}

	function map_to_map(decoder, len) {
	  var value = new Map();
	  var i;
	  var k = new Array(len);
	  var v = new Array(len);

	  var decode = decoder.codec.decode;
	  for (i = 0; i < len; i++) {
	    k[i] = decode(decoder);
	    v[i] = decode(decoder);
	  }
	  for (i = 0; i < len; i++) {
	    value.set(k[i], v[i]);
	  }
	  return value;
	}

	function array(decoder, len) {
	  var value = new Array(len);
	  var decode = decoder.codec.decode;
	  for (var i = 0; i < len; i++) {
	    value[i] = decode(decoder);
	  }
	  return value;
	}

	function str(decoder, len) {
	  var start = decoder.reserve(len);
	  var end = start + len;
	  return toString.call(decoder.buffer, "utf-8", start, end);
	}

	function bin_buffer(decoder, len) {
	  var start = decoder.reserve(len);
	  var end = start + len;
	  var buf = slice.call(decoder.buffer, start, end);
	  return from(buf);
	}

	function bin_arraybuffer(decoder, len) {
	  var start = decoder.reserve(len);
	  var end = start + len;
	  var buf = slice.call(decoder.buffer, start, end);
	  return from$3(buf).buffer;
	}

	function ext(decoder, len) {
	  var start = decoder.reserve(len+1);
	  var type = decoder.buffer[start++];
	  var end = start + len;
	  var unpack = decoder.codec.getExtUnpacker(type);
	  if (!unpack) throw new Error("Invalid ext type: " + (type ? ("0x" + type.toString(16)) : type));
	  var buf = slice.call(decoder.buffer, start, end);
	  return unpack(buf);
	}

	function uint8(decoder) {
	  var start = decoder.reserve(1);
	  return decoder.buffer[start];
	}

	function int8(decoder) {
	  var start = decoder.reserve(1);
	  var value = decoder.buffer[start];
	  return (value & 0x80) ? value - 0x100 : value;
	}

	function uint16(decoder) {
	  var start = decoder.reserve(2);
	  var buffer = decoder.buffer;
	  return (buffer[start++] << 8) | buffer[start];
	}

	function int16(decoder) {
	  var start = decoder.reserve(2);
	  var buffer = decoder.buffer;
	  var value = (buffer[start++] << 8) | buffer[start];
	  return (value & 0x8000) ? value - 0x10000 : value;
	}

	function uint32(decoder) {
	  var start = decoder.reserve(4);
	  var buffer = decoder.buffer;
	  return (buffer[start++] * 16777216) + (buffer[start++] << 16) + (buffer[start++] << 8) + buffer[start];
	}

	function int32(decoder) {
	  var start = decoder.reserve(4);
	  var buffer = decoder.buffer;
	  return (buffer[start++] << 24) | (buffer[start++] << 16) | (buffer[start++] << 8) | buffer[start];
	}

	function read$2(len, method) {
	  return function(decoder) {
	    var start = decoder.reserve(len);
	    return method.call(decoder.buffer, start, NO_ASSERT);
	  };
	}

	function readUInt64BE(start) {
	  return new Uint64BE$2(this, start).toNumber();
	}

	function readInt64BE(start) {
	  return new Int64BE$2(this, start).toNumber();
	}

	function readUInt64BE_int64(start) {
	  return new Uint64BE$2(this, start);
	}

	function readInt64BE_int64(start) {
	  return new Int64BE$2(this, start);
	}

	function readFloatBE(start) {
	  return read(this, start, false, 23, 4);
	}

	function readDoubleBE(start) {
	  return read(this, start, false, 52, 8);
	}

	function getReadToken(options) {
	  var format = getReadFormat(options);

	  if (options && options.useraw) {
	    return init_useraw(format);
	  } else {
	    return init_token$1(format);
	  }
	}

	function init_token$1(format) {
	  var i;
	  var token = new Array(256);

	  // positive fixint -- 0x00 - 0x7f
	  for (i = 0x00; i <= 0x7f; i++) {
	    token[i] = constant$1(i);
	  }

	  // fixmap -- 0x80 - 0x8f
	  for (i = 0x80; i <= 0x8f; i++) {
	    token[i] = fix(i - 0x80, format.map);
	  }

	  // fixarray -- 0x90 - 0x9f
	  for (i = 0x90; i <= 0x9f; i++) {
	    token[i] = fix(i - 0x90, format.array);
	  }

	  // fixstr -- 0xa0 - 0xbf
	  for (i = 0xa0; i <= 0xbf; i++) {
	    token[i] = fix(i - 0xa0, format.str);
	  }

	  // nil -- 0xc0
	  token[0xc0] = constant$1(null);

	  // (never used) -- 0xc1
	  token[0xc1] = null;

	  // false -- 0xc2
	  // true -- 0xc3
	  token[0xc2] = constant$1(false);
	  token[0xc3] = constant$1(true);

	  // bin 8 -- 0xc4
	  // bin 16 -- 0xc5
	  // bin 32 -- 0xc6
	  token[0xc4] = flex(format.uint8, format.bin);
	  token[0xc5] = flex(format.uint16, format.bin);
	  token[0xc6] = flex(format.uint32, format.bin);

	  // ext 8 -- 0xc7
	  // ext 16 -- 0xc8
	  // ext 32 -- 0xc9
	  token[0xc7] = flex(format.uint8, format.ext);
	  token[0xc8] = flex(format.uint16, format.ext);
	  token[0xc9] = flex(format.uint32, format.ext);

	  // float 32 -- 0xca
	  // float 64 -- 0xcb
	  token[0xca] = format.float32;
	  token[0xcb] = format.float64;

	  // uint 8 -- 0xcc
	  // uint 16 -- 0xcd
	  // uint 32 -- 0xce
	  // uint 64 -- 0xcf
	  token[0xcc] = format.uint8;
	  token[0xcd] = format.uint16;
	  token[0xce] = format.uint32;
	  token[0xcf] = format.uint64;

	  // int 8 -- 0xd0
	  // int 16 -- 0xd1
	  // int 32 -- 0xd2
	  // int 64 -- 0xd3
	  token[0xd0] = format.int8;
	  token[0xd1] = format.int16;
	  token[0xd2] = format.int32;
	  token[0xd3] = format.int64;

	  // fixext 1 -- 0xd4
	  // fixext 2 -- 0xd5
	  // fixext 4 -- 0xd6
	  // fixext 8 -- 0xd7
	  // fixext 16 -- 0xd8
	  token[0xd4] = fix(1, format.ext);
	  token[0xd5] = fix(2, format.ext);
	  token[0xd6] = fix(4, format.ext);
	  token[0xd7] = fix(8, format.ext);
	  token[0xd8] = fix(16, format.ext);

	  // str 8 -- 0xd9
	  // str 16 -- 0xda
	  // str 32 -- 0xdb
	  token[0xd9] = flex(format.uint8, format.str);
	  token[0xda] = flex(format.uint16, format.str);
	  token[0xdb] = flex(format.uint32, format.str);

	  // array 16 -- 0xdc
	  // array 32 -- 0xdd
	  token[0xdc] = flex(format.uint16, format.array);
	  token[0xdd] = flex(format.uint32, format.array);

	  // map 16 -- 0xde
	  // map 32 -- 0xdf
	  token[0xde] = flex(format.uint16, format.map);
	  token[0xdf] = flex(format.uint32, format.map);

	  // negative fixint -- 0xe0 - 0xff
	  for (i = 0xe0; i <= 0xff; i++) {
	    token[i] = constant$1(i - 0x100);
	  }

	  return token;
	}

	function init_useraw(format) {
	  var i;
	  var token = init_token$1(format).slice();

	  // raw 8 -- 0xd9
	  // raw 16 -- 0xda
	  // raw 32 -- 0xdb
	  token[0xd9] = token[0xc4];
	  token[0xda] = token[0xc5];
	  token[0xdb] = token[0xc6];

	  // fixraw -- 0xa0 - 0xbf
	  for (i = 0xa0; i <= 0xbf; i++) {
	    token[i] = fix(i - 0xa0, format.bin);
	  }

	  return token;
	}

	function constant$1(value) {
	  return function() {
	    return value;
	  };
	}

	function flex(lenFunc, decodeFunc) {
	  return function(decoder) {
	    var len = lenFunc(decoder);
	    return decodeFunc(decoder, len);
	  };
	}

	function fix(len, method) {
	  return function(decoder) {
	    return method(decoder, len);
	  };
	}

	install({
	  addExtUnpacker: addExtUnpacker,
	  getExtUnpacker: getExtUnpacker,
	  init: init$1
	});

	var preset$2 = init$1.call(preset$1);

	function getDecoder(options) {
	  var readToken = getReadToken(options);
	  return decode;

	  function decode(decoder) {
	    var type = uint8(decoder);
	    var func = readToken[type];
	    if (!func) throw new Error("Invalid type: " + (type ? ("0x" + type.toString(16)) : type));
	    return func(decoder);
	  }
	}

	function init$1() {
	  var options = this.options;
	  this.decode = getDecoder(options);

	  if (options && options.preset) {
	    setExtUnpackers(this);
	  }

	  return this;
	}

	function addExtUnpacker(etype, unpacker) {
	  var unpackers = this.extUnpackers || (this.extUnpackers = []);
	  unpackers[etype] = filter(unpacker);
	}

	function getExtUnpacker(type) {
	  var unpackers = this.extUnpackers || (this.extUnpackers = []);
	  return unpackers[type] || extUnpacker;

	  function extUnpacker(buffer) {
	    return new ExtBuffer(buffer, type);
	  }
	}

	FlexDecoder.mixin(DecodeBuffer.prototype);

	function DecodeBuffer(options) {
	  if (!(this instanceof DecodeBuffer)) return new DecodeBuffer(options);

	  if (options) {
	    this.options = options;
	    if (options.codec) {
	      var codec = this.codec = options.codec;
	      if (codec.bufferish) this.bufferish = codec.bufferish;
	    }
	  }
	}

	DecodeBuffer.prototype.codec = preset$2;

	DecodeBuffer.prototype.fetch = function() {
	  return this.codec.decode(this);
	};

	function decode(input, options) {
	  var decoder = new DecodeBuffer(options);
	  decoder.write(input);
	  return decoder.read();
	}

	var eventLite = createCommonjsModule(function (module) {
	/**
	 * event-lite.js - Light-weight EventEmitter (less than 1KB when gzipped)
	 *
	 * @copyright Yusuke Kawasaki
	 * @license MIT
	 * @constructor
	 * @see https://github.com/kawanet/event-lite
	 * @see http://kawanet.github.io/event-lite/EventLite.html
	 * @example
	 * var EventLite = require("event-lite");
	 *
	 * function MyClass() {...}             // your class
	 *
	 * EventLite.mixin(MyClass.prototype);  // import event methods
	 *
	 * var obj = new MyClass();
	 * obj.on("foo", function() {...});     // add event listener
	 * obj.once("bar", function() {...});   // add one-time event listener
	 * obj.emit("foo");                     // dispatch event
	 * obj.emit("bar");                     // dispatch another event
	 * obj.off("foo");                      // remove event listener
	 */

	function EventLite() {
	  if (!(this instanceof EventLite)) return new EventLite();
	}

	(function(EventLite) {
	  // export the class for node.js
	  if ("undefined" !== typeof module) module.exports = EventLite;

	  // property name to hold listeners
	  var LISTENERS = "listeners";

	  // methods to export
	  var methods = {
	    on: on,
	    once: once,
	    off: off,
	    emit: emit
	  };

	  // mixin to self
	  mixin(EventLite.prototype);

	  // export mixin function
	  EventLite.mixin = mixin;

	  /**
	   * Import on(), once(), off() and emit() methods into target object.
	   *
	   * @function EventLite.mixin
	   * @param target {Prototype}
	   */

	  function mixin(target) {
	    for (var key in methods) {
	      target[key] = methods[key];
	    }
	    return target;
	  }

	  /**
	   * Add an event listener.
	   *
	   * @function EventLite.prototype.on
	   * @param type {string}
	   * @param func {Function}
	   * @returns {EventLite} Self for method chaining
	   */

	  function on(type, func) {
	    getListeners(this, type).push(func);
	    return this;
	  }

	  /**
	   * Add one-time event listener.
	   *
	   * @function EventLite.prototype.once
	   * @param type {string}
	   * @param func {Function}
	   * @returns {EventLite} Self for method chaining
	   */

	  function once(type, func) {
	    var that = this;
	    wrap.originalListener = func;
	    getListeners(that, type).push(wrap);
	    return that;

	    function wrap() {
	      off.call(that, type, wrap);
	      func.apply(this, arguments);
	    }
	  }

	  /**
	   * Remove an event listener.
	   *
	   * @function EventLite.prototype.off
	   * @param [type] {string}
	   * @param [func] {Function}
	   * @returns {EventLite} Self for method chaining
	   */

	  function off(type, func) {
	    var that = this;
	    var listners;
	    if (!arguments.length) {
	      delete that[LISTENERS];
	    } else if (!func) {
	      listners = that[LISTENERS];
	      if (listners) {
	        delete listners[type];
	        if (!Object.keys(listners).length) return off.call(that);
	      }
	    } else {
	      listners = getListeners(that, type, true);
	      if (listners) {
	        listners = listners.filter(ne);
	        if (!listners.length) return off.call(that, type);
	        that[LISTENERS][type] = listners;
	      }
	    }
	    return that;

	    function ne(test) {
	      return test !== func && test.originalListener !== func;
	    }
	  }

	  /**
	   * Dispatch (trigger) an event.
	   *
	   * @function EventLite.prototype.emit
	   * @param type {string}
	   * @param [value] {*}
	   * @returns {boolean} True when a listener received the event
	   */

	  function emit(type, value) {
	    var that = this;
	    var listeners = getListeners(that, type, true);
	    if (!listeners) return false;
	    var arglen = arguments.length;
	    if (arglen === 1) {
	      listeners.forEach(zeroarg);
	    } else if (arglen === 2) {
	      listeners.forEach(onearg);
	    } else {
	      var args = Array.prototype.slice.call(arguments, 1);
	      listeners.forEach(moreargs);
	    }
	    return !!listeners.length;

	    function zeroarg(func) {
	      func.call(that);
	    }

	    function onearg(func) {
	      func.call(that, value);
	    }

	    function moreargs(func) {
	      func.apply(that, args);
	    }
	  }

	  /**
	   * @ignore
	   */

	  function getListeners(that, type, readonly) {
	    if (readonly && !that[LISTENERS]) return;
	    var listeners = that[LISTENERS] || (that[LISTENERS] = {});
	    return listeners[type] || (listeners[type] = []);
	  }

	})(EventLite);
	});

	interopDefault(eventLite);

	function Encoder(options) {
	  if (!(this instanceof Encoder)) return new Encoder(options);
	  EncodeBuffer.call(this, options);
	}

	Encoder.prototype = new EncodeBuffer();

	undefined(Encoder.prototype);

	Encoder.prototype.encode = function(chunk) {
	  this.write(chunk);
	  this.emit("data", this.read());
	};

	Encoder.prototype.end = function(chunk) {
	  if (arguments.length) this.encode(chunk);
	  this.flush();
	  this.emit("end");
	};

	function Decoder(options) {
	  if (!(this instanceof Decoder)) return new Decoder(options);
	  DecodeBuffer.call(this, options);
	}

	Decoder.prototype = new DecodeBuffer();

	undefined(Decoder.prototype);

	Decoder.prototype.decode = function(chunk) {
	  if (arguments.length) this.write(chunk);
	  this.flush();
	};

	Decoder.prototype.push = function(chunk) {
	  this.emit("data", chunk);
	};

	Decoder.prototype.end = function(chunk) {
	  this.decode(chunk);
	  this.emit("end");
	};

	util.inherits(EncodeStream, stream.Transform);

	var DEFAULT_OPTIONS = {objectMode: true};

	function EncodeStream(options) {
	  if (!(this instanceof EncodeStream)) return new EncodeStream(options);
	  if (options) {
	    options.objectMode = true;
	  } else {
	    options = DEFAULT_OPTIONS;
	  }
	  stream.Transform.call(this, options);

	  var stream$$ = this;
	  var encoder = this.encoder = new EncodeBuffer(options);
	  encoder.push = function(chunk) {
	    stream$$.push(chunk);
	  };
	}

	EncodeStream.prototype._transform = function(chunk, encoding, callback) {
	  this.encoder.write(chunk);
	  if (callback) callback();
	};

	EncodeStream.prototype._flush = function(callback) {
	  this.encoder.flush();
	  if (callback) callback();
	};

	util.inherits(DecodeStream, stream.Transform);

	var DEFAULT_OPTIONS$1 = {objectMode: true};

	function DecodeStream(options) {
	  if (!(this instanceof DecodeStream)) return new DecodeStream(options);
	  if (options) {
	    options.objectMode = true;
	  } else {
	    options = DEFAULT_OPTIONS$1;
	  }
	  stream.Transform.call(this, options);
	  var stream$$ = this;
	  var decoder = this.decoder = new DecodeBuffer(options);
	  decoder.push = function(chunk) {
	    stream$$.push(chunk);
	  };
	}

	DecodeStream.prototype._transform = function(chunk, encoding, callback) {
	  this.decoder.write(chunk);
	  this.decoder.flush();
	  if (callback) callback();
	};

	// @public
	// msgpack.codec.preset

	var codec = {
	  preset: preset$1
	};

	exports.encode = encode;
	exports.decode = decode;
	exports.Encoder = Encoder;
	exports.Decoder = Decoder;
	exports.createEncodeStream = EncodeStream;
	exports.createDecodeStream = DecodeStream;
	exports.createCodec = createCodec;
	exports.codec = codec;

}((this.msgpack-lite = this.msgpack-lite || {}),util,stream));
//# sourceMappingURL=msgpack.min.js.map
